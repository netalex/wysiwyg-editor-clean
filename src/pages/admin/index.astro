---
import BaseLayout from "../../layouts/BaseLayout.astro";
import WysiwygEditor from "../../components/WysiwygEditor.astro";
import AuthGuard from "../../components/AuthGuard.astro";
---

<BaseLayout title="Admin - WYSIWYG Editor">
    <AuthGuard>
      <div class="admin-container">
        <h1>Editor WYSIWYG</h1>
    <p>Utilizza l'editor qui sotto per creare o modificare contenuti</p>

    <div class="admin-header">
        <div class="user-info">
            <span id="user-email"></span>
            <button id="logout-btn" class="logout-btn">Logout</button>
        </div>
        <a href="/admin/posts" class="button secondary">Gestisci post esistenti</a>
    </div>

    <div class="editor-form">
      <div class="form-group">
        <label for="title">Titolo <span class="required">*</span></label>
        <input
          type="text"
          id="title"
          name="title"
          placeholder="Inserisci un titolo..."
          required
        />
      </div>

      <div class="form-group">
        <label for="slug">Slug <span class="required">*</span></label>
        <input
          type="text"
          id="slug"
          name="slug"
          placeholder="inserisci-uno-slug..."
          required
        />
      </div>

      <div class="form-group">
        <label for="category">Categoria</label>
        <select id="category" name="category">
          <option value="">Seleziona categoria</option>
          <option value="Psicologia">Psicologia</option>
          <option value="Terapia">Terapia</option>
          <option value="Benessere">Benessere</option>
          <option value="Mindfulness">Mindfulness</option>
        </select>
      </div>

      <div class="form-group">
        <label for="description">Descrizione</label>
        <textarea
          id="description"
          name="description"
          placeholder="Inserisci una breve descrizione..."
          rows="3"></textarea>
      </div>

      <WysiwygEditor id="wysiwyg-editor" />

      <div class="form-actions">
        <button id="saveBtn" type="button">Salva</button>
        <button id="previewBtn" type="button">Anteprima</button>
        <button id="resetBtn" type="button" class="reset-btn">Reset</button>
      </div>
    </div>
  </div>
</AuthGuard>
</BaseLayout>

<script>
        import { auth } from "../../lib/supabase";

  // Declare TinyMCE type to avoid TS errors
  declare global {
    interface Window {
      tinymce: any;
    }
  }

  // Post interface to improve type safety
  interface BlogPost {
    title: string;
    slug: string;
    content: string;
    category?: string;
    description?: string;
    date: string;
    updatedAt?: string;
  }

  document.addEventListener("DOMContentLoaded", () => {


    const logoutBtn = document.getElementById("logout-btn");
        const userEmailSpan = document.getElementById("user-email");

        if (logoutBtn) {
            logoutBtn.addEventListener("click", async () => {
                try {
                    await auth.signOut();
                    window.location.href = "/admin/login";
                } catch (error) {
                    console.error("Errore durante il logout:", error);
                }
            });
        }

        // Mostra l'email dell'utente
        const displayUserInfo = async () => {
            if (userEmailSpan) {
                try {
                    const user = await auth.getCurrentUser();
                    if (user) {
                        userEmailSpan.textContent = user.email || "";
                    }
                } catch (error) {
                    console.error("Errore durante il recupero dell'utente:", error);
                }
            }
        };

        displayUserInfo();

    // Use HTMLInputElement type for proper typing
    const titleInput = document.getElementById("title") as HTMLInputElement;
    const slugInput = document.getElementById("slug") as HTMLInputElement;
    const categorySelect = document.getElementById(
      "category"
    ) as HTMLSelectElement;
    const descriptionTextarea = document.getElementById(
      "description"
    ) as HTMLTextAreaElement;
    const saveBtn = document.getElementById("saveBtn") as HTMLButtonElement;
    const previewBtn = document.getElementById(
      "previewBtn"
    ) as HTMLButtonElement;
    const resetBtn = document.getElementById("resetBtn") as HTMLButtonElement;

    // Check that we have all necessary elements
    if (!titleInput || !slugInput || !saveBtn || !previewBtn || !resetBtn) {
      console.error("Required DOM elements not found");
      return;
    }

    // Genera slug automaticamente dal titolo
    titleInput.addEventListener("input", () => {
      const title = titleInput.value;
      const slug = title
        .toLowerCase()
        .replace(/[^\w\s]/gi, "")
        .replace(/\s+/g, "-");

      slugInput.value = slug;
    });

    // Salva il contenuto nel localStorage
    saveBtn.addEventListener("click", () => {
      const title = titleInput.value.trim();
      const slug = slugInput.value.trim();
      const category = categorySelect ? categorySelect.value : "";
      const description = descriptionTextarea ? descriptionTextarea.value : "";

      if (!title || !slug) {
        alert("Per favore, compila tutti i campi obbligatori");
        return;
      }

      // Verifica che l'editor sia inizializzato
      if (!window.tinymce || !window.tinymce.get("wysiwyg-editor")) {
        alert("Editor non inizializzato correttamente. Ricarica la pagina.");
        return;
      }

      // Recupera il contenuto dell'editor
      const content = window.tinymce.get("wysiwyg-editor").getContent();

      if (!content || content.trim() === "") {
        alert("Il contenuto del post non può essere vuoto");
        return;
      }

      // Salva tutto nel localStorage (temporaneo, poi useremo Git Gateway)
      const post: BlogPost = {
        title,
        slug,
        content,
        category,
        description,
        date: new Date().toISOString(),
      };

      // Salva nel localStorage
      const posts: BlogPost[] = JSON.parse(
        localStorage.getItem("blog-posts") || "[]"
      );

      // Cerca se esiste già un post con lo stesso slug
      const existingIndex = posts.findIndex((p: BlogPost) => p.slug === slug);

      if (existingIndex >= 0) {
        if (
          !confirm(
            `Esiste già un post con lo slug "${slug}". Vuoi sovrascriverlo?`
          )
        ) {
          return;
        }
        // Update existing post
        posts[existingIndex] = post;
      } else {
        // Add new post
        posts.push(post);
      }

      localStorage.setItem("blog-posts", JSON.stringify(posts));

      alert("Post salvato con successo!");

      // Pulisci l'editor e resetta il form
      resetEditor();
    });

    // Anteprima del contenuto
    previewBtn.addEventListener("click", () => {
      // Verifica che l'editor sia inizializzato
      if (!window.tinymce || !window.tinymce.get("wysiwyg-editor")) {
        alert("Editor non inizializzato correttamente. Ricarica la pagina.");
        return;
      }

      const content = window.tinymce.get("wysiwyg-editor").getContent();
      const title = titleInput.value || "Anteprima";

      // Salva i dati di anteprima nel localStorage
      localStorage.setItem(
        "preview-post",
        JSON.stringify({
          title,
          content,
        })
      );

      // Apri una nuova finestra con l'anteprima
      window.open("/preview", "_blank");
    });

    // Reset dell'editor
    resetBtn.addEventListener("click", () => {
      if (
        confirm(
          "Sei sicuro di voler resettare il form? Tutti i dati non salvati andranno persi."
        )
      ) {
        resetEditor();
      }
    });

    /**
     * Funzione per pulire l'editor e resettare il form
     * Resetta tutti i campi e l'istanza TinyMCE
     */
    function resetEditor(): void {
      // Pulisci i campi del form
      titleInput.value = "";
      slugInput.value = "";

      if (categorySelect) {
        categorySelect.value = "";
      }

      if (descriptionTextarea) {
        descriptionTextarea.value = "";
      }

      // Resetta il contenuto dell'editor TinyMCE
      if (window.tinymce && window.tinymce.get("wysiwyg-editor")) {
        const editor = window.tinymce.get("wysiwyg-editor");

        // Pulisci il contenuto dell'editor
        editor.setContent("");

        // Rimuovi eventuali selezioni attive
        editor.selection.select(editor.getBody(), true);
        editor.selection.collapse(false);

        // Rimuovi dal localStorage eventuali dati temporanei dell'editor
        localStorage.removeItem("tinymce-content-wysiwyg-editor");

        // Focus sul campo del titolo per una migliore UX
        setTimeout(() => {
          titleInput.focus();
        }, 100);
      }
    }
  });
</script>

<style>
  .admin-container {
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 20px 0;
  }


  .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        #user-email {
            font-size: 14px;
            color: #666;
        }

        .logout-btn {
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 5px 10px;
            font-size: 14px;
            cursor: pointer;
        }

        .logout-btn:hover {
            background-color: #e0e0e0;
        }

  .button {
    display: inline-block;
    padding: 8px 16px;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 500;
    color: white;
  }

  .button.secondary {
    background-color: #2196f3;
  }

  .editor-form {
    background-color: #f5f5f5;
    border-radius: 8px;
    padding: 20px;
    margin-top: 20px;
  }

  .form-group {
    margin-bottom: 15px;
  }

  .form-group label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }

  .required {
    color: #ff3860;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
  }

  .form-group textarea {
    resize: vertical;
  }

  .form-actions {
    margin-top: 20px;
    display: flex;
    gap: 10px;
  }

  .form-actions button {
    padding: 10px 15px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
  }

  #saveBtn {
    background-color: #4caf50;
    color: white;
  }

  #previewBtn {
    background-color: #2196f3;
    color: white;
  }

  .reset-btn {
    background-color: #f5f5f5;
    color: #333;
    border: 1px solid #ddd !important;
  }
</style>
