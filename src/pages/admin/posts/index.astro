---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import AuthGuard from "../../../components/AuthGuard.astro";
---

<BaseLayout title="Gestione Post - WYSIWYG Editor">
  <AuthGuard>
  <div class="admin-container">
    <h1>Gestione Post</h1>

    <div class="admin-header">
      <a href="/admin" class="back-link">‚Üê Torna all'editor</a>
      <div class="admin-actions">
        <button id="newPostBtn" class="new-post-btn">Nuovo Post</button>
        <button id="deleteSelectedBtn" class="delete-selected-btn" disabled
          >Elimina selezionati (<span id="selected-count">0</span>)</button
        >
      </div>
    </div>

    <div class="posts-filter">
      <input
        type="text"
        id="search-posts"
        placeholder="Cerca post..."
        class="search-input"
      />
      <select id="category-filter" class="category-filter">
        <option value="">Tutte le categorie</option>
        <option value="Psicologia">Psicologia</option>
        <option value="Terapia">Terapia</option>
        <option value="Benessere">Benessere</option>
        <option value="Mindfulness">Mindfulness</option>
      </select>
    </div>

    <div id="postsList" class="posts-list">
      <p>Caricamento post...</p>
    </div>
  </div>
  </AuthGuard>
</BaseLayout>

<script>
  interface BlogPost {
    title: string;
    slug: string;
    content: string;
    category?: string;
    description?: string;
    date: string;
    updatedAt?: string;
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Elementi DOM con controlli null-safety
    const postsListContainer = document.getElementById("postsList");
    const newPostBtn = document.getElementById("newPostBtn");
    const deleteSelectedBtn = document.getElementById("deleteSelectedBtn");
    const selectedCountSpan = document.getElementById("selected-count");
    const searchInput = document.getElementById(
      "search-posts"
    ) as HTMLInputElement;
    const categoryFilter = document.getElementById(
      "category-filter"
    ) as HTMLSelectElement;

    // Verifica che gli elementi esistano
    if (
      !postsListContainer ||
      !newPostBtn ||
      !deleteSelectedBtn ||
      !selectedCountSpan
    ) {
      console.error("Required DOM elements not found");
      return;
    }

    // Reindirizza alla pagina di modifica per un nuovo post
    newPostBtn.addEventListener("click", () => {
      window.location.href = "/admin";
    });

    // Gestione del pulsante "Elimina selezionati"
    deleteSelectedBtn.addEventListener("click", () => {
      deleteSelectedPosts();
    });

    // Eventi di filtro
    if (searchInput) {
      searchInput.addEventListener("input", () => {
        loadPosts();
      });
    }

    if (categoryFilter) {
      categoryFilter.addEventListener("change", () => {
        loadPosts();
      });
    }

    // Carica i post dal localStorage
    loadPosts();

    function loadPosts() {
      try {
        // Cast esplicito a array di oggetti
        const allPosts: BlogPost[] = JSON.parse(
          localStorage.getItem("blog-posts") || "[]"
        );

        // Filtro di ricerca
        const searchTerm = searchInput ? searchInput.value.toLowerCase() : "";
        const categoryValue = categoryFilter ? categoryFilter.value : "";

        // Applica i filtri
        const posts = allPosts.filter((post: BlogPost) => {
          const matchesSearch =
            !searchTerm ||
            post.title.toLowerCase().includes(searchTerm) ||
            post.slug.toLowerCase().includes(searchTerm) ||
            (post.description &&
              post.description.toLowerCase().includes(searchTerm)) ||
            post.content.toLowerCase().includes(searchTerm);

          const matchesCategory =
            !categoryValue || post.category === categoryValue;

          return matchesSearch && matchesCategory;
        });

        if (posts.length === 0) {
          if (postsListContainer) {
            postsListContainer.innerHTML =
              searchTerm || categoryValue
                ? '<p class="no-posts">Nessun post corrisponde ai criteri di ricerca.</p>'
                : '<p class="no-posts">Nessun post disponibile. Crea il tuo primo post!</p>';
          }
          return;
        }

        // Ordina i post per data (pi√π recenti prima)
        // Usiamo Number() per garantire che il confronto sia numerico
        posts.sort(
          (a: BlogPost, b: BlogPost) =>
            Number(new Date(b.updatedAt || b.date)) -
            Number(new Date(a.updatedAt || a.date))
        );

        // Genera HTML per la tabella dei post
        let tableHTML = `
          <table class="posts-table">
            <thead>
              <tr>
                <th class="checkbox-cell" scope="col">
                  <input type="checkbox" id="select-all-posts" title="Seleziona tutti">
                </th>
                <th scope="col">Titolo</th>
                <th scope="col">Categoria</th>
                <th scope="col">Data</th>
                <th scope="col">Azioni</th>
              </tr>
            </thead>
            <tbody id="posts-table-body">
        `;

        posts.forEach((post: BlogPost) => {
          // Formatta la data in italiano
          const postDate = new Date(post.updatedAt || post.date);
          const formattedDate = postDate.toLocaleDateString("it-IT", {
            year: "numeric",
            month: "long",
            day: "numeric",
          });

          const isUpdated = post.updatedAt && post.updatedAt !== post.date;

          // Escape per evitare XSS
          const safeTitle = String(post.title)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");

          const safeSlug = String(post.slug)
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");

          const safeCategory = post.category
            ? String(post.category)
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;")
            : "<em>Nessuna</em>";

          tableHTML += `
            <tr data-slug="${safeSlug}">
              <td class="checkbox-cell">
                <input type="checkbox" class="post-select" data-slug="${safeSlug}">
              </td>
              <td>
                <a href="/blog/${safeSlug}" target="_blank" class="post-title">${safeTitle}</a>
                <small class="post-slug">/${safeSlug}</small>
              </td>
              <td>${safeCategory}</td>
              <td>
                ${formattedDate}
                ${isUpdated ? '<span class="updated-badge">modificato</span>' : ""}
              </td>
              <td class="actions">
                <button class="edit-btn" data-slug="${safeSlug}" title="Modifica">
                  <span class="icon">‚úèÔ∏è</span>
                </button>
                <button class="view-btn" data-slug="${safeSlug}" title="Visualizza">
                  <span class="icon">üëÅÔ∏è</span>
                </button>
                <button class="delete-btn" data-slug="${safeSlug}" title="Elimina">
                  <span class="icon">üóëÔ∏è</span>
                </button>
              </td>
            </tr>
          `;
        });

        tableHTML += `
            </tbody>
          </table>
        `;

        if (postsListContainer) {
          postsListContainer.innerHTML = tableHTML;

          // Salva lo stato attuale delle checkbox selezionate
          const selectedSlugs = getSelectedSlugs();

          // Aggiungi event listeners per i pulsanti di modifica ed eliminazione
          setupTableEventListeners();

          // Ripristina le selezioni
          restoreSelectedCheckboxes(selectedSlugs);
        }

        // Funzione per configurare tutti gli event listeners della tabella
        function setupTableEventListeners() {
          document.querySelectorAll(".edit-btn").forEach((btn) => {
            btn.addEventListener("click", () => {
              const slug = btn.getAttribute("data-slug");
              if (slug) editPost(slug);
            });
          });

          document.querySelectorAll(".view-btn").forEach((btn) => {
            btn.addEventListener("click", () => {
              const slug = btn.getAttribute("data-slug");
              if (slug) window.open(`/blog/${slug}`, "_blank");
            });
          });

          document.querySelectorAll(".delete-btn").forEach((btn) => {
            btn.addEventListener("click", () => {
              const slug = btn.getAttribute("data-slug");
              if (slug) deletePost(slug);
            });
          });

          // Gestione selezione multipla
          const selectAllCheckbox = document.getElementById(
            "select-all-posts"
          ) as HTMLInputElement;
          const checkboxes = document.querySelectorAll(".post-select");

          // Gestione "Seleziona tutti"
          if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener("change", () => {
              const isChecked = selectAllCheckbox.checked;

              checkboxes.forEach((checkbox) => {
                // Cast a HTMLInputElement per accedere alla propriet√† checked
                (checkbox as HTMLInputElement).checked = isChecked;
              });

              // Abilita/disabilita il pulsante "Elimina selezionati"
              updateDeleteSelectedButton();
            });
          }

          // Gestione singole checkbox
          checkboxes.forEach((checkbox) => {
            checkbox.addEventListener("change", () => {
              // Controlla se tutte le checkbox sono selezionate
              const allChecked = Array.from(checkboxes).every(
                (cb) => (cb as HTMLInputElement).checked
              );

              const anyChecked = Array.from(checkboxes).some(
                (cb) => (cb as HTMLInputElement).checked
              );

              // Aggiorna lo stato di "Seleziona tutti"
              if (selectAllCheckbox) {
                selectAllCheckbox.checked = allChecked;
                selectAllCheckbox.indeterminate = anyChecked && !allChecked;
              }

              // Abilita/disabilita il pulsante "Elimina selezionati"
              updateDeleteSelectedButton();
            });
          });
        }
      } catch (error) {
        console.error("Error loading posts:", error);
        if (postsListContainer) {
          postsListContainer.innerHTML =
            '<p class="error-message">Si √® verificato un errore nel caricamento dei post.</p>';
        }
      }
    }

    // Funzione per aggiornare lo stato del pulsante "Elimina selezionati"
    function updateDeleteSelectedButton() {
      const checkboxes = document.querySelectorAll(".post-select");
      const selectedCount = Array.from(checkboxes).filter(
        (cb) => (cb as HTMLInputElement).checked
      ).length;

      // Cast a HTMLButtonElement per accedere alla propriet√† disabled
      (deleteSelectedBtn as HTMLButtonElement).disabled = selectedCount === 0;

      // Aggiorna il conteggio
      if (selectedCountSpan) {
        selectedCountSpan.textContent = selectedCount.toString();
      }
    }

    // Funzione per ottenere gli slug dei post selezionati
    function getSelectedSlugs(): string[] {
      const selectedCheckboxes = document.querySelectorAll(
        ".post-select:checked"
      );
      return Array.from(selectedCheckboxes)
        .map((checkbox) => checkbox.getAttribute("data-slug"))
        .filter((slug): slug is string => slug !== null);
    }

    // Funzione per ripristinare le checkbox selezionate dopo il ricaricamento della tabella
    function restoreSelectedCheckboxes(slugs: string[]): void {
      if (slugs.length === 0) return;

      const checkboxes = document.querySelectorAll(".post-select");
      checkboxes.forEach((checkbox) => {
        const slug = checkbox.getAttribute("data-slug");
        if (slug && slugs.includes(slug)) {
          (checkbox as HTMLInputElement).checked = true;
        }
      });

      // Aggiorna anche lo stato della checkbox "Seleziona tutti"
      const selectAllCheckbox = document.getElementById(
        "select-all-posts"
      ) as HTMLInputElement;
      if (selectAllCheckbox) {
        const allChecked = checkboxes.length === slugs.length;
        selectAllCheckbox.checked = allChecked;
        selectAllCheckbox.indeterminate = !allChecked && slugs.length > 0;
      }

      // Aggiorna il pulsante "Elimina selezionati"
      updateDeleteSelectedButton();
    }

    function editPost(slug: string) {
      // Reindirizza alla pagina di modifica con lo slug del post
      window.location.href = `/admin/edit/${slug}`;
    }

    function deletePost(slug: string) {
      if (
        !confirm(
          "Sei sicuro di voler eliminare questo post? Questa azione non pu√≤ essere annullata."
        )
      ) {
        return;
      }

      // Recupera i post dal localStorage
      const posts = JSON.parse(localStorage.getItem("blog-posts") || "[]");

      // Trova il titolo del post per il messaggio di conferma
      const postToDelete = posts.find((post: BlogPost) => post.slug === slug);
      const postTitle = postToDelete ? postToDelete.title : slug;

      // Filtra per rimuovere il post con lo slug specificato
      const updatedPosts = posts.filter((post: BlogPost) => post.slug !== slug);

      // Salva i post aggiornati nel localStorage
      localStorage.setItem("blog-posts", JSON.stringify(updatedPosts));

      // Notifica l'utente
      const message = document.createElement("div");
      message.className = "toast-message";
      message.innerHTML = `
        <div class="toast-content">
          <span class="toast-icon">‚úì</span>
          <span>Post "${postTitle}" eliminato con successo</span>
        </div>
        <button class="toast-close">&times;</button>
      `;
      document.body.appendChild(message);

      // Aggiungi handler per chiudere il toast
      const closeBtn = message.querySelector(".toast-close");
      if (closeBtn) {
        closeBtn.addEventListener("click", () => {
          message.remove();
        });
      }

      // Auto-chiusura dopo 5 secondi
      setTimeout(() => {
        if (document.body.contains(message)) {
          message.remove();
        }
      }, 5000);

      // Ricarica la lista dei post
      loadPosts();
    }

    function deleteSelectedPosts() {
      const selectedSlugs = getSelectedSlugs();

      if (selectedSlugs.length === 0) {
        return;
      }

      if (
        !confirm(
          `Sei sicuro di voler eliminare ${selectedSlugs.length} post? Questa azione non pu√≤ essere annullata.`
        )
      ) {
        return;
      }

      // Recupera i post dal localStorage
      const posts: BlogPost[] = JSON.parse(
        localStorage.getItem("blog-posts") || "[]"
      );

      // Filtra per rimuovere i post selezionati
      const updatedPosts = posts.filter(
        (post: BlogPost) => !selectedSlugs.includes(post.slug)
      );

      // Salva i post aggiornati nel localStorage
      localStorage.setItem("blog-posts", JSON.stringify(updatedPosts));

      // Notifica l'utente
      const message = document.createElement("div");
      message.className = "toast-message";
      message.innerHTML = `
        <div class="toast-content">
          <span class="toast-icon">‚úì</span>
          <span>${selectedSlugs.length} post eliminati con successo</span>
        </div>
        <button class="toast-close">&times;</button>
      `;
      document.body.appendChild(message);

      // Aggiungi handler per chiudere il toast
      const closeBtn = message.querySelector(".toast-close");
      if (closeBtn) {
        closeBtn.addEventListener("click", () => {
          message.remove();
        });
      }

      // Auto-chiusura dopo 5 secondi
      setTimeout(() => {
        if (document.body.contains(message)) {
          message.remove();
        }
      }, 5000);

      // Ricarica la lista dei post
      loadPosts();
    }
  });
</script>

<style>
  .admin-container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 20px;
  }

  .admin-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin: 20px 0;
  }

  .admin-actions {
    display: flex;
    gap: 10px;
  }

  .back-link {
    color: #2196f3;
    text-decoration: none;
    display: flex;
    align-items: center;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  .new-post-btn {
    background-color: #4caf50;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    display: flex;
    align-items: center;
  }

  .posts-filter {
    display: flex;
    gap: 10px;
    margin-bottom: 20px;
  }

  .search-input,
  .category-filter {
    padding: 8px 12px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }

  .search-input {
    flex-grow: 1;
  }

  .posts-list {
    margin-top: 20px;
  }

  .no-posts {
    text-align: center;
    padding: 20px;
    color: #666;
    background-color: #f9f9f9;
    border-radius: 8px;
  }

  .posts-table {
    width: 100%;
    border-collapse: collapse;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 3px rgba(0, 0, 0, 0.1);
  }

  .posts-table th,
  .posts-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }

  .posts-table th {
    background-color: #f0f0f0;
    font-weight: bold;
    color: #555;
  }

  .posts-table tr:last-child td {
    border-bottom: none;
  }

  .posts-table tr:hover {
    background-color: #f9f9f9;
  }

  .post-title {
    color: #333;
    text-decoration: none;
    font-weight: 500;
    display: block;
  }

  .post-title:hover {
    text-decoration: underline;
    color: #2196f3;
  }

  .post-slug {
    color: #999;
    font-size: 12px;
    display: block;
    margin-top: 4px;
  }

  .updated-badge {
    display: inline-block;
    background-color: #f1f1f1;
    color: #666;
    font-size: 11px;
    padding: 2px 6px;
    border-radius: 10px;
    margin-left: 6px;
  }

  .actions {
    display: flex;
    gap: 8px;
    justify-content: flex-end;
  }

  .edit-btn,
  .view-btn,
  .delete-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition:
      background-color 0.2s,
      transform 0.1s;
    background-color: transparent;
  }

  .edit-btn:hover {
    background-color: #e3f2fd;
    transform: translateY(-1px);
  }

  .view-btn:hover {
    background-color: #e8f5e9;
    transform: translateY(-1px);
  }

  .delete-btn:hover {
    background-color: #ffebee;
    transform: translateY(-1px);
  }

  .icon {
    font-size: 16px;
  }

  .delete-selected-btn {
    background-color: #f44336;
    color: white;
    border: none;
    padding: 10px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
  }

  .delete-selected-btn:disabled {
    background-color: #ffcdd2;
    cursor: not-allowed;
    opacity: 0.6;
  }

  .checkbox-cell {
    width: 40px;
    text-align: center;
  }

  input[type="checkbox"] {
    width: 18px;
    height: 18px;
    cursor: pointer;
  }

  .error-message {
    color: red;
    text-align: center;
    padding: 10px;
    border: 1px solid red;
    margin-top: 10px;
  }

  /* Toast notification */
  .toast-message {
    position: fixed;
    bottom: 30px;
    right: 30px;
    background-color: #4caf50;
    color: white;
    padding: 0;
    border-radius: 6px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
    z-index: 1000;
    min-width: 300px;
    display: flex;
    animation: slideIn 0.3s forwards;
  }

  .toast-content {
    display: flex;
    align-items: center;
    padding: 12px 15px;
    flex-grow: 1;
  }

  .toast-icon {
    margin-right: 12px;
    font-size: 18px;
  }

  .toast-close {
    background: none;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
    padding: 0 12px;
    align-self: stretch;
    display: flex;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.1);
  }

  .toast-close:hover {
    background-color: rgba(0, 0, 0, 0.2);
  }

  @keyframes slideIn {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>
