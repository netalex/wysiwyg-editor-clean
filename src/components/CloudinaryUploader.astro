
---
interface Props {
  folder?: string;
  maxFileSize?: number;
  allowedFormats?: string[];
  onSuccess?: string;
  onError?: string;
}

const {
  folder = "blog-images",
  maxFileSize = 10485760, // 10MB
  allowedFormats = ["jpg", "jpeg", "png", "gif", "webp", "svg"],
  onSuccess = "",
  onError = ""
} = Astro.props;
---

<div class="cloudinary-uploader">
  <div class="upload-container">
    <label for="file-upload" class="upload-button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="18"
        height="18"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
      >
        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
        <circle cx="8.5" cy="8.5" r="1.5"></circle>
        <polyline points="21 15 16 10 5 21"></polyline>
      </svg>
      Seleziona un'immagine
    </label>
    <input type="file" id="file-upload" accept="image/*" class="file-input" />
  </div>

  <div class="image-preview-container" id="image-preview-container">
    <div class="placeholder-text">Anteprima immagine</div>
  </div>

  <div id="upload-progress" class="progress-container" style="display:none;">
    <div class="progress-bar">
      <div id="progress-indicator" class="progress-indicator"></div>
    </div>
    <div id="progress-text" class="progress-text">0%</div>
  </div>

  <div id="upload-error" class="error-message"></div>

  <!-- Input nascosto per l'URL dell'immagine caricata -->
  <input type="hidden" id="uploaded-image-url" />
  <input type="hidden" id="uploaded-image-public-id" />
</div>

<script define:vars={{ folder, maxFileSize, allowedFormats, onSuccess, onError }}
>
  document.addEventListener("DOMContentLoaded", () => {
    const fileInput = document.getElementById("file-upload");
    const previewContainer = document.getElementById("image-preview-container");
    const progressContainer = document.getElementById("upload-progress");
    const progressIndicator = document.getElementById("progress-indicator");
    const progressText = document.getElementById("progress-text");
    const errorMessage = document.getElementById("upload-error");
    const uploadedImageUrlInput = document.getElementById("uploaded-image-url");
    const uploadedImagePublicIdInput = document.getElementById(
      "uploaded-image-public-id"
    );

    // Verifica gli elementi
    if (
      !fileInput ||
      !previewContainer ||
      !progressContainer ||
      !progressIndicator ||
      !progressText ||
      !errorMessage ||
      !uploadedImageUrlInput ||
      !uploadedImagePublicIdInput
    ) {
      console.error("Elementi DOM mancanti");
      return;
    }

    // Event listener per la selezione del file
    fileInput.addEventListener("change", async (e) => {
      const file = e.target.files?.[0];
      if (!file) return;

      // Validazione del formato del file
      const fileExtension = file.name.split(".").pop()?.toLowerCase() || "";
      if (!allowedFormats.includes(fileExtension)) {
        errorMessage.textContent = `Formato file non supportato. Formati consentiti: ${allowedFormats.join(", ")}`;
        return;
      }

      // Validazione della dimensione del file
      if (file.size > maxFileSize) {
        errorMessage.textContent = `File troppo grande. Dimensione massima: ${Math.floor(maxFileSize / 1024 / 1024)}MB`;
        return;
      }

      // Reset errore
      errorMessage.textContent = "";

      // Mostra anteprima
      showImagePreview(file);

      // Carica su Cloudinary
      await uploadToCloudinary(file);
    });

    // Funzione per mostrare l'anteprima dell'immagine
    function showImagePreview(file) {
      const reader = new FileReader();

      reader.onload = (e) => {
        previewContainer.innerHTML = `
          <img src="${e.target.result}" alt="Anteprima" class="preview-image" />
          `;
      };

      reader.readAsDataURL(file);
    }

    // Funzione per ottenere una firma di upload Cloudinary
    async function getCloudinarySignature() {
      try {
        const response = await fetch("/api/cloudinary-signature", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            paramsToSign: {
              folder,
            },
          }),
        });

        if (!response.ok) {
          throw new Error("Errore durante la generazione della firma");
        }

        const data = await response.json();
        if (!data.signature || !data.apiKey || !data.timestamp || !data.cloudName) {
          throw new Error("Firma Cloudinary incompleta");
        }

        return data;
      } catch (error) {
        console.error("Errore signature:", error);
        errorMessage.textContent =
          error instanceof Error
            ? error.message
            : "Errore durante la generazione della firma";
        throw error;
      }
    }

    // Funzione per caricare l'immagine su Cloudinary
    async function uploadToCloudinary(file) {
      try {
        // Mostra il progresso
        progressContainer.style.display = "block";
        progressIndicator.style.width = "0%";
        progressText.textContent = "0%";

        // Ottieni firma per upload sicuro
        const signatureData = await getCloudinarySignature();

        // Crea FormData per l'upload
        const formData = new FormData();
        formData.append("file", file);
        formData.append("api_key", signatureData.apiKey);
        formData.append("timestamp", signatureData.timestamp);
        formData.append("signature", signatureData.signature);
        formData.append("folder", folder);

        // Crea una richiesta XMLHttpRequest per tracciare il progresso
        const xhr = new XMLHttpRequest();
        xhr.open(
          "POST",
          `https://api.cloudinary.com/v1_1/${signatureData.cloudName}/image/upload`,
          true
        );

        // Gestione progresso
        xhr.upload.onprogress = (event) => {
          if (event.lengthComputable) {
            const percent = Math.round((event.loaded / event.total) * 100);
            progressIndicator.style.width = `${percent}%`;
            progressText.textContent = `${percent}%`;
          }
        };

        // Gestione completamento
        xhr.onload = function () {
          if (xhr.status === 200) {
            const result = JSON.parse(xhr.responseText);

            // Aggiorna i campi nascosti
            if (uploadedImageUrlInput) {
              uploadedImageUrlInput.value = result.secure_url;
            }

            if (uploadedImagePublicIdInput) {
              uploadedImagePublicIdInput.value = result.public_id;
            }

            // Nascondi progresso
            progressContainer.style.display = "none";

            // Emetti evento di completamento
            const event = new CustomEvent("cloudinaryUploadSuccess", {
              detail: {
                url: result.secure_url,
                publicId: result.public_id,
                width: result.width,
                height: result.height,
                format: result.format,
              },
            });
            document.dispatchEvent(event);

            // Esegui callback di successo se specificato
            if (onSuccess) {
              try {
                window.eval(onSuccess);
              } catch (e) {
                console.error("Errore durante l'esecuzione di onSuccess", e);
              }
            }
          } else {
            console.error("Errore upload Cloudinary:", xhr.responseText);
            errorMessage.textContent =
              "Errore durante il caricamento dell'immagine";
            progressContainer.style.display = "none";

            // Esegui callback di errore se specificato
            if (onError) {
              try {
                window.eval(onError);
              } catch (e) {
                console.error("Errore durante l'esecuzione di onError", e);
              }
            }
          }
        };

        // Gestione errori di rete
        xhr.onerror = function () {
          errorMessage.textContent = "Errore di rete durante il caricamento";
          progressContainer.style.display = "none";

          // Esegui callback di errore se specificato
          if (onError) {
            try {
              window.eval(onError);
            } catch (e) {
              console.error("Errore durante l'esecuzione di onError", e);
            }
          }
        };

        // Invia la richiesta
        xhr.send(formData);
      } catch (error) {
        console.error("Errore:", error);
        errorMessage.textContent =
          error instanceof Error ? error.message : "Errore sconosciuto";
        progressContainer.style.display = "none";

        // Esegui callback di errore se specificato
        if (onError) {
          try {
            window.eval(onError);
          } catch (e) {
            console.error("Errore durante l'esecuzione di onError", e);
          }
        }
      }
    }
  });
</script>

<style>
  .cloudinary-uploader {
    width: 100%;
    margin-bottom: 1rem;
  }

  .upload-container {
    margin-bottom: 1rem;
  }

  .upload-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: #4a6cf7;
    color: white;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .upload-button:hover {
    background-color: #3a5ce5;
  }

  .file-input {
    display: none;
  }

  .image-preview-container {
    width: 100%;
    height: 200px;
    background-color: #f5f5f5;
    border: 2px dashed #ddd;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .placeholder-text {
    color: #999;
    font-size: 14px;
  }

  .preview-image {
    max-width: 100%;
    max-height: 100%;
    object-fit: contain;
  }

  .progress-container {
    margin-bottom: 1rem;
  }

  .progress-bar {
    width: 100%;
    height: 8px;
    background-color: #f0f0f0;
    border-radius: 4px;
    overflow: hidden;
  }

  .progress-indicator {
    height: 100%;
    background-color: #4a6cf7;
    width: 0%;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 12px;
    color: #666;
    text-align: center;
    margin-top: 4px;
  }

  .error-message {
    color: #e53935;
    font-size: 14px;
    margin-top: 0.5rem;
    min-height: 20px;
  }
</style>
