---
// Importa i componenti
// Nota: Assicurati di creare le cartelle e percorsi corretti
import CloudinaryUploader from "./CloudinaryUploader.astro";
import MediaGallery from "./MediaGallery.astro";

interface Props {
  id?: string;
  initialContent?: string;
  height?: number;
}

const {
  id = "wysiwyg-editor",
  initialContent = "",
  height = 500,
} = Astro.props;

// Leggi variabili d'ambiente per Cloudinary
const cloudinaryCloudName = import.meta.env.PUBLIC_CLOUDINARY_CLOUD_NAME;
const cloudinaryApiKey = import.meta.env.PUBLIC_CLOUDINARY_API_KEY;
const hasCloudinaryConfig = cloudinaryCloudName && cloudinaryApiKey;
---

<div class="wysiwyg-editor-container">
  <textarea id={id} placeholder="Scrivi qui il tuo contenuto..."
    >{initialContent}</textarea
  >

  <!-- Dialog per l'upload delle immagini -->
  <dialog id="cloudinary-dialog" class="cloudinary-dialog">
    <div class="dialog-header">
      <h3>Gestione Immagini</h3>
      <button id="close-cloudinary-dialog" class="close-dialog-btn">×</button>
    </div>

    <div class="dialog-tabs">
      <button class="tab-btn active" data-tab="upload">Carica nuova</button>
      <button class="tab-btn" data-tab="gallery">Galleria</button>
    </div>

    <div class="dialog-content">
      <div id="upload-tab" class="tab-content active">
        <CloudinaryUploader
          folder="blog-images"
          onSuccess="onCloudinaryUploadSuccess(event.detail)"
        />
      </div>

      <div id="gallery-tab" class="tab-content">
        <MediaGallery
          folder="blog-images"
          onSelect="insertImageFromGallery(publicId, url)"
        />
      </div>
    </div>

    <div class="dialog-footer">
      <button id="cancel-cloudinary-dialog" class="cancel-btn">Annulla</button>
    </div>
  </dialog>
</div>

<script define:vars={{ id, initialContent, height, hasCloudinaryConfig }}>
  document.addEventListener("DOMContentLoaded", () => {
    // Carica TinyMCE dal path locale
    const script = document.createElement("script");
    script.src = "/assets/tinymce/tinymce.min.js";
    script.onload = initEditor;
    document.head.appendChild(script);
  });

  let editor; // Riferimento all'istanza dell'editor TinyMCE

  function initEditor() {
    // Percorso base per tinymce
    const tinymcePath = "/assets/tinymce";

    // Array di plugins base
    const plugins = [
      "link",
      "lists",
      "table",
      "code",
      "searchreplace",
      "fullscreen",
      "media",
      "image",
    ];

    // Array di voci della toolbar base
    const toolbar = [
      "undo redo | blocks | bold italic | alignleft aligncenter alignright | bullist numlist | link",
      "table | code | searchreplace | fullscreen",
    ];

    // Aggiungi pulsante Cloudinary se configurato
    if (hasCloudinaryConfig) {
      toolbar[0] += " cloudinaryimage";
    }

    // Inizializza TinyMCE con il percorso base per i plugin e skin
    window.tinymce.init({
      selector: `#${id}`,
      plugins: plugins.join(" "),
      toolbar: toolbar.join(" | "),
      menubar: "file edit view insert format tools table help",
      content_style:
        "body { font-family: -apple-system, BlinkMacSystemFont, San Francisco, Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: 16px; }",
      height: height,
      promotion: false,
      branding: false,
      base_url: tinymcePath,
      entity_encoding: "raw",
      convert_urls: false,
      relative_urls: false,
      language: "it",
      suffix: ".min",
      autosave_ask_before_unload: true,
      autosave_interval: "30s",

      // Configurazione per l'aggiunta di pulsanti personalizzati
      setup: function (ed) {
        editor = ed;

        // Aggiungi pulsante Cloudinary alla toolbar
        if (hasCloudinaryConfig) {
          editor.ui.registry.addButton("cloudinaryimage", {
            icon: "image",
            tooltip: "Inserisci immagine",
            onAction: function () {
              openCloudinaryDialog();
            },
          });
        }

        // Salvataggio automatico in localStorage
        editor.on("change", function () {
          localStorage.setItem(`tinymce-content-${id}`, editor.getContent());
        });

        // Carica contenuto salvato se non è fornito initialContent
        editor.on("init", function () {
          if (!initialContent) {
            const savedContent = localStorage.getItem(`tinymce-content-${id}`);
            if (savedContent) {
              editor.setContent(savedContent);
            }
          }
        });
      },
    });
  }

  // Funzione per aprire il dialog Cloudinary
  function openCloudinaryDialog() {
    const dialog = document.getElementById("cloudinary-dialog");
    if (dialog instanceof HTMLDialogElement) {
      dialog.showModal();
      setupDialogEvents();
    }
  }

  // Configura eventi per il dialog
  function setupDialogEvents() {
    // Chiusura dialog
    const closeBtn = document.getElementById("close-cloudinary-dialog");
    if (closeBtn) {
      closeBtn.addEventListener("click", () => {
        const dialog = document.getElementById("cloudinary-dialog");
        if (dialog instanceof HTMLDialogElement) {
          dialog.close();
        }
      });
    }

    const cancelBtn = document.getElementById("cancel-cloudinary-dialog");
    if (cancelBtn) {
      cancelBtn.addEventListener("click", () => {
        const dialog = document.getElementById("cloudinary-dialog");
        if (dialog instanceof HTMLDialogElement) {
          dialog.close();
        }
      });
    }

    // Tab switching
    document.querySelectorAll(".tab-btn").forEach((btn) => {
      btn.addEventListener("click", () => {
        // Rimuovi classe active da tutti i tab
        document
          .querySelectorAll(".tab-btn")
          .forEach((b) => b.classList.remove("active"));
        document
          .querySelectorAll(".tab-content")
          .forEach((c) => c.classList.remove("active"));

        // Aggiungi classe active al tab corrente
        btn.classList.add("active");
        const tabId = btn.getAttribute("data-tab");
        const tabContent = document.getElementById(`${tabId}-tab`);
        if (tabContent) {
          tabContent.classList.add("active");
        }
      });
    });
  }

  // Funzione per gestire upload riuscito da Cloudinary
  window.onCloudinaryUploadSuccess = function (detail) {
    if (!editor) return;

    // Inserisci l'immagine nell'editor
    const { url, width, height } = detail;
    insertImageInEditor(url, width, height);

    // Chiudi il dialog
    const dialog = document.getElementById("cloudinary-dialog");
    if (dialog instanceof HTMLDialogElement) {
      dialog.close();
    }
  };

  // Funzione per inserire immagine da galleria
  window.insertImageFromGallery = function (publicId, url) {
    if (!editor) return;

    // Inserisci l'immagine nell'editor
    insertImageInEditor(url);

    // Chiudi il dialog
    const dialog = document.getElementById("cloudinary-dialog");
    if (dialog instanceof HTMLDialogElement) {
      dialog.close();
    }
  };

  // Funzione helper per inserire immagine nell'editor
  function insertImageInEditor(url, width, height) {
    if (!editor) return;

    const imgHtml =
      width && height
        ? `<img src="${url}" alt="" width="${width}" height="${height}" loading="lazy" />`
        : `<img src="${url}" alt="" loading="lazy" />`;

    editor.insertContent(imgHtml);
    editor.focus();
  }
</script>

<style>
  .wysiwyg-editor-container {
    margin: 20px 0;
    width: 100%;
  }

  /* Dialog styles */
  .cloudinary-dialog {
    width: 90%;
    max-width: 800px;
    height: 80vh;
    max-height: 700px;
    padding: 0;
    border: none;
    border-radius: 8px;
    box-shadow: 0 4px 24px rgba(0, 0, 0, 0.2);
  }

  .cloudinary-dialog::backdrop {
    background-color: rgba(0, 0, 0, 0.5);
  }

  .dialog-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid #eee;
  }

  .dialog-header h3 {
    margin: 0;
    font-size: 1.2rem;
  }

  .close-dialog-btn {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    line-height: 1;
    padding: 0 0.5rem;
    color: #666;
  }

  .dialog-tabs {
    display: flex;
    background-color: #f5f5f5;
    border-bottom: 1px solid #eee;
  }

  .tab-btn {
    padding: 0.75rem 1.5rem;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1rem;
    color: #666;
    border-bottom: 3px solid transparent;
  }

  .tab-btn.active {
    color: #4a6cf7;
    border-bottom-color: #4a6cf7;
    background-color: white;
  }

  .dialog-content {
    padding: 1rem;
    height: calc(80vh - 150px);
    max-height: 550px;
    overflow-y: auto;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .dialog-footer {
    padding: 1rem;
    border-top: 1px solid #eee;
    display: flex;
    justify-content: flex-end;
  }

  .cancel-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    background-color: #f5f5f5;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.9rem;
  }

  .cancel-btn:hover {
    background-color: #eee;
  }
</style>
